<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Dashboard</title>
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    th, td {
      padding: 8px;
      text-align: center;
      border: 1px solid #ddd;
    }
    th {
      background-color: #f2f2f2;
    }
    h1, h2 {
      text-align: center;
    }
    /* Flex container for charts */
    .chart-container {
      display: flex;
      justify-content: space-between; /* Evenly spaces the bar charts */
      gap: 20px; /* Adds space between charts */
      margin-top: 40px;
    }
    .chart {
      width: 500px;
      height: 500px;
    }
    /* Pie chart container below the bar charts */
    .pie-chart-container {
      text-align: center;
      height: 500px;
      width: 500px;
    }
  </style>
</head>
<body>

<%- include('./layout/navbar.ejs') %>

<h1>Welcome, <%= user.username %>!</h1>

<h2>Your Account Details</h2>
<h4>Current Balance: ₹<%= Number(user.balance).toFixed(2) %></h4>
<!-- Transaction table ends here -->

<h2 style="text-align: center; margin-top: 40px;">Charts</h2>
<div class="chart-container">
  <!-- Money Sent Bar Chart -->
  <div class="chart">
    <h3 style="text-align: center;">Money Sent - Bar Chart</h3>
    <canvas id="barChart"></canvas>
  </div>

  <!-- Money Received Bar Chart -->
  <div class="chart">
    <h3 style="text-align: center;">Money Received - Bar Chart</h3>
    <canvas id="receivedBarChart"></canvas>
  </div>
</div>

<!-- Transaction Purposes Pie Chart -->
<div class="pie-chart-container">
  <h3>Transaction Purposes - Pie Chart</h3>
  <canvas id="pieChart" ></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  // Pass transactions and user from server side
  const allTransactions = JSON.parse(decodeURIComponent("<%= encodeURIComponent(JSON.stringify(transactions)) %>"));
  const currentUser = "<%= user.username %>";

  // Money Sent Bar Chart
  const sentTransactions = allTransactions.filter(t => t.sender_name === currentUser);
  const amountsByReceiver = {};
  sentTransactions.forEach(transaction => {
    const receiver = transaction.receiver_name;
    if (!amountsByReceiver[receiver]) {
      amountsByReceiver[receiver] = 0;
    }
    amountsByReceiver[receiver] += transaction.amount;
  });

  const receiverNames = Object.keys(amountsByReceiver);
  const amounts = Object.values(amountsByReceiver);
  const ctx = document.getElementById('barChart').getContext('2d');
  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: receiverNames,
      datasets: [{
        label: 'Amount Sent (₹)',
        data: amounts,
        backgroundColor: 'rgba(54, 162, 235, 0.7)',
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          title: { display: true, text: 'Amount (₹)' }
        },
        x: {
          title: { display: true, text: 'Receiver Username' }
        }
      }
    }
  });

  // Money Received Bar Chart
  const receivedTransactions = allTransactions.filter(t => t.receiver_name === currentUser);
  const amountsBySender = {};
  receivedTransactions.forEach(transaction => {
    const sender = transaction.sender_name;
    if (!amountsBySender[sender]) {
      amountsBySender[sender] = 0;
    }
    amountsBySender[sender] += transaction.amount;
  });

  const senderNames = Object.keys(amountsBySender);
  const receivedAmounts = Object.values(amountsBySender);
  const ctxReceived = document.getElementById('receivedBarChart').getContext('2d');
  new Chart(ctxReceived, {
    type: 'bar',
    data: {
      labels: senderNames,
      datasets: [{
        label: 'Amount Received (₹)',
        data: receivedAmounts,
        backgroundColor: 'rgba(75, 192, 192, 0.7)',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          title: { display: true, text: 'Amount (₹)' }
        },
        x: {
          title: { display: true, text: 'Sender Username' }
        }
      }
    }
  });

  // Transaction Purposes Pie Chart
</script>
<script>
  const userTransactions = allTransactions.filter(t => 
    t.sender_name === currentUser || t.receiver_name === currentUser
  );

  const amountsByPurpose = {};
  userTransactions.forEach(transaction => {
    const purpose = transaction.purpose || "Unknown";
    if (!amountsByPurpose[purpose]) {
      amountsByPurpose[purpose] = 0;
    }
    amountsByPurpose[purpose] += transaction.amount;
  });

  const purposes = Object.keys(amountsByPurpose);
  const amountsByPurposeValues = Object.values(amountsByPurpose);

  const ctxPie = document.getElementById('pieChart').getContext('2d');
  new Chart(ctxPie, {
    type: 'pie',
    data: {
      labels: purposes,
      datasets: [{
        label: 'Amount by Purpose',
        data: amountsByPurposeValues,
        backgroundColor: [
          'rgba(255, 99, 132, 0.6)',
          'rgba(54, 162, 235, 0.6)',
          'rgba(255, 206, 86, 0.6)',
          'rgba(75, 192, 192, 0.6)',
          'rgba(153, 102, 255, 0.6)',
          'rgba(255, 159, 64, 0.6)',
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)',
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: {
          display: true,
          position: 'top'
        },
        tooltip: {
          enabled: true,
          callbacks: {
            label: function(context) {
              const label = context.label || '';
              const value = context.parsed || 0;
              return `${label}: ₹${value.toFixed(2)}`;
            }
          }
        }
      }
    }
  });
</script>

<!-- <%- include('./layout/footer.ejs') %> -->

</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Dashboard</title>
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    th, td {
      padding: 8px;
      text-align: center;
      border: 1px solid #ddd;
    }
    th {
      background-color: #f2f2f2;
    }
    h1, h2 {
      text-align: center;
    }
    .chart-container {
      display: flex;
      justify-content: space-between;
      gap: 20px;
      margin-top: 40px;
    }
    .chart {
      width: 500px;
      height: 500px;
    }
    .pie-chart-container {
      text-align: center;
      height: 500px;
      width: 500px;
      margin: 40px auto;
    }
    .filter-form {
      max-width: 600px;
      margin: 0 auto 30px;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 10px;
      background-color: #f9f9f9;
    }
    .filter-form label {
      display: block;
      margin-bottom: 5px;
    }
    .filter-form input,
    .filter-form select {
      width: 100%;
      padding: 8px;
      margin-bottom: 15px;
    }
    .filter-form button {
      width: 100%;
      padding: 10px;
      background-color: #007bff;
      color: white;
      border: none;
      cursor: pointer;
    }
    .filter-form button:hover {
      background-color: #0056b3;
    }
    .notice {
      text-align: center;
      margin-top: 20px;
      font-size: 1.1rem;
      color: #333;
    }
  </style>
</head>
<body>

<%- include('./layout/navbar.ejs') %>

<h1>Welcome, <%= user.username %>!</h1>

<!-- Filter Form -->
<div class="filter-form">
  <form method="GET" action="/main">
    <label for="start">From Date:</label>
    <input type="date" id="start" name="start" required max="<%= new Date().toISOString().split('T')[0] %>">

    <label for="end">To Date:</label>
    <input type="date" id="end" name="end" required max="<%= new Date().toISOString().split('T')[0] %>">

    <button type="submit">Filter Transactions</button>
  </form>
</div>

<% if (queryPeriod) { %>
  <div class="notice">
    Showing transactions from <strong><%= queryPeriod.start %></strong> to <strong><%= queryPeriod.end %></strong>
  </div>
<% } %>

<% if (transactions.length === 0) { %>
  <div class="notice">No transactions found for the selected period.</div>
<% } else { %>
<h2 style="text-align: center; margin-top: 40px;">Charts</h2>

<div class="chart-container">
  <!-- Sent Bar Chart -->
  <div class="chart">
    <h3 style="text-align: center;">Money Sent</h3>
    <canvas id="barChart"></canvas>
  </div>

  <!-- Received Bar Chart -->
  <div class="chart">
    <h3 style="text-align: center;">Money Received</h3>
    <canvas id="receivedBarChart"></canvas>
  </div>
</div>

<!-- Purpose Pie Chart -->
<div class="pie-chart-container">
  <h3>Transaction Purposes</h3>
  <canvas id="pieChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  const transactions = JSON.parse(decodeURIComponent("<%= encodeURIComponent(JSON.stringify(transactions)) %>"));
  const currentUser = "<%= user.username %>";

  const sentMap = {}, receivedMap = {}, purposeMap = {};
  transactions.forEach(t => {
    if (t.sender_name === currentUser) {
      sentMap[t.receiver_name] = (sentMap[t.receiver_name] || 0) + t.amount;
    }
    if (t.receiver_name === currentUser) {
      receivedMap[t.sender_name] = (receivedMap[t.sender_name] || 0) + t.amount;
    }
    const key = t.purpose || 'Unknown';
    purposeMap[key] = (purposeMap[key] || 0) + t.amount;
  });

  new Chart(document.getElementById('barChart').getContext('2d'), {
    type: 'bar',
    data: {
      labels: Object.keys(sentMap),
      datasets: [{
        label: 'Amount Sent (₹)',
        data: Object.values(sentMap),
        backgroundColor: 'rgba(54, 162, 235, 0.7)',
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          title: { display: true, text: 'Amount (₹)' }
        },
        x: {
          title: { display: true, text: 'Receiver Username' }
        }
      }
    }
  });

  new Chart(document.getElementById('receivedBarChart').getContext('2d'), {
    type: 'bar',
    data: {
      labels: Object.keys(receivedMap),
      datasets: [{
        label: 'Amount Received (₹)',
        data: Object.values(receivedMap),
        backgroundColor: 'rgba(75, 192, 192, 0.7)',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          title: { display: true, text: 'Amount (₹)' }
        },
        x: {
          title: { display: true, text: 'Sender Username' }
        }
      }
    }
  });

  new Chart(document.getElementById('pieChart').getContext('2d'), {
    type: 'pie',
    data: {
      labels: Object.keys(purposeMap),
      datasets: [{
        data: Object.values(purposeMap),
        backgroundColor: [
          'rgba(255, 99, 132, 0.6)',
          'rgba(54, 162, 235, 0.6)',
          'rgba(255, 206, 86, 0.6)',
          'rgba(75, 192, 192, 0.6)',
          'rgba(153, 102, 255, 0.6)',
          'rgba(255, 159, 64, 0.6)'
        ],
        borderColor: [
          'rgba(255, 99, 132, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)'
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { position: 'top' },
        tooltip: {
          callbacks: {
            label: ctx => `${ctx.label}: ₹${ctx.parsed.toFixed(2)}`
          }
        }
      }
    }
  });
</script>
<% } %>
</body>
</html>
